ARM GAS  /tmp/cczgPemc.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f1xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/stm32f1xx_it.c"
  18              		.section	.text.NMI_Handler,"ax",%progbits
  19              		.align	1
  20              		.global	NMI_Handler
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	NMI_Handler:
  26              	.LFB70:
   1:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f1xx_it.c **** /**
   3:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Core/Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f1xx_it.c ****   * @attention
   8:Core/Src/stm32f1xx_it.c ****   *
   9:Core/Src/stm32f1xx_it.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/stm32f1xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f1xx_it.c ****   *
  12:Core/Src/stm32f1xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f1xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f1xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f1xx_it.c ****   *
  16:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f1xx_it.c ****   */
  18:Core/Src/stm32f1xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f1xx_it.c **** 
  20:Core/Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f1xx_it.c **** #include "main.h"
  22:Core/Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  23:Core/Src/stm32f1xx_it.c **** #include "FreeRTOS.h"
  24:Core/Src/stm32f1xx_it.c **** #include "task.h"
  25:Core/Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  28:Core/Src/stm32f1xx_it.c **** 
  29:Core/Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  31:Core/Src/stm32f1xx_it.c **** 
  32:Core/Src/stm32f1xx_it.c **** /* USER CODE END TD */
ARM GAS  /tmp/cczgPemc.s 			page 2


  33:Core/Src/stm32f1xx_it.c **** 
  34:Core/Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  36:Core/Src/stm32f1xx_it.c **** 
  37:Core/Src/stm32f1xx_it.c **** /* USER CODE END PD */
  38:Core/Src/stm32f1xx_it.c **** 
  39:Core/Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  41:Core/Src/stm32f1xx_it.c **** 
  42:Core/Src/stm32f1xx_it.c **** /* USER CODE END PM */
  43:Core/Src/stm32f1xx_it.c **** 
  44:Core/Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  46:Core/Src/stm32f1xx_it.c **** 
  47:Core/Src/stm32f1xx_it.c **** /* USER CODE END PV */
  48:Core/Src/stm32f1xx_it.c **** 
  49:Core/Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  50:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  51:Core/Src/stm32f1xx_it.c **** 
  52:Core/Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  53:Core/Src/stm32f1xx_it.c **** 
  54:Core/Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  55:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  56:Core/Src/stm32f1xx_it.c **** 
  57:Core/Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  58:Core/Src/stm32f1xx_it.c **** 
  59:Core/Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  60:Core/Src/stm32f1xx_it.c **** extern CAN_HandleTypeDef hcan;
  61:Core/Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  62:Core/Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_tx;
  63:Core/Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  64:Core/Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  65:Core/Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart1;
  66:Core/Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  67:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  68:Core/Src/stm32f1xx_it.c **** 
  69:Core/Src/stm32f1xx_it.c **** /* USER CODE END EV */
  70:Core/Src/stm32f1xx_it.c **** 
  71:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
  72:Core/Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */
  73:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
  74:Core/Src/stm32f1xx_it.c **** /**
  75:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  76:Core/Src/stm32f1xx_it.c ****   */
  77:Core/Src/stm32f1xx_it.c **** void NMI_Handler(void)
  78:Core/Src/stm32f1xx_it.c **** {
  27              		.loc 1 78 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  79:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  80:Core/Src/stm32f1xx_it.c **** 
  81:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  82:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
ARM GAS  /tmp/cczgPemc.s 			page 3


  83:Core/Src/stm32f1xx_it.c ****   while (1)
  34              		.loc 1 83 3 view .LVU1
  84:Core/Src/stm32f1xx_it.c ****   {
  85:Core/Src/stm32f1xx_it.c ****   }
  35              		.loc 1 85 3 view .LVU2
  83:Core/Src/stm32f1xx_it.c ****   {
  36              		.loc 1 83 9 view .LVU3
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE70:
  41              		.section	.text.HardFault_Handler,"ax",%progbits
  42              		.align	1
  43              		.global	HardFault_Handler
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  48              	HardFault_Handler:
  49              	.LFB71:
  86:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  87:Core/Src/stm32f1xx_it.c **** }
  88:Core/Src/stm32f1xx_it.c **** 
  89:Core/Src/stm32f1xx_it.c **** /**
  90:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  91:Core/Src/stm32f1xx_it.c ****   */
  92:Core/Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  93:Core/Src/stm32f1xx_it.c **** {
  50              		.loc 1 93 1 view -0
  51              		.cfi_startproc
  52              		@ Volatile: function does not return.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.L4:
  94:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  95:Core/Src/stm32f1xx_it.c **** 
  96:Core/Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  97:Core/Src/stm32f1xx_it.c ****   while (1)
  57              		.loc 1 97 3 view .LVU5
  98:Core/Src/stm32f1xx_it.c ****   {
  99:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 100:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 101:Core/Src/stm32f1xx_it.c ****   }
  58              		.loc 1 101 3 view .LVU6
  97:Core/Src/stm32f1xx_it.c ****   {
  59              		.loc 1 97 9 view .LVU7
  60 0000 FEE7     		b	.L4
  61              		.cfi_endproc
  62              	.LFE71:
  64              		.section	.text.MemManage_Handler,"ax",%progbits
  65              		.align	1
  66              		.global	MemManage_Handler
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  71              	MemManage_Handler:
  72              	.LFB72:
 102:Core/Src/stm32f1xx_it.c **** }
ARM GAS  /tmp/cczgPemc.s 			page 4


 103:Core/Src/stm32f1xx_it.c **** 
 104:Core/Src/stm32f1xx_it.c **** /**
 105:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 106:Core/Src/stm32f1xx_it.c ****   */
 107:Core/Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 108:Core/Src/stm32f1xx_it.c **** {
  73              		.loc 1 108 1 view -0
  74              		.cfi_startproc
  75              		@ Volatile: function does not return.
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79              	.L6:
 109:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 110:Core/Src/stm32f1xx_it.c **** 
 111:Core/Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 112:Core/Src/stm32f1xx_it.c ****   while (1)
  80              		.loc 1 112 3 view .LVU9
 113:Core/Src/stm32f1xx_it.c ****   {
 114:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 115:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 116:Core/Src/stm32f1xx_it.c ****   }
  81              		.loc 1 116 3 view .LVU10
 112:Core/Src/stm32f1xx_it.c ****   {
  82              		.loc 1 112 9 view .LVU11
  83 0000 FEE7     		b	.L6
  84              		.cfi_endproc
  85              	.LFE72:
  87              		.section	.text.BusFault_Handler,"ax",%progbits
  88              		.align	1
  89              		.global	BusFault_Handler
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  94              	BusFault_Handler:
  95              	.LFB73:
 117:Core/Src/stm32f1xx_it.c **** }
 118:Core/Src/stm32f1xx_it.c **** 
 119:Core/Src/stm32f1xx_it.c **** /**
 120:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 121:Core/Src/stm32f1xx_it.c ****   */
 122:Core/Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 123:Core/Src/stm32f1xx_it.c **** {
  96              		.loc 1 123 1 view -0
  97              		.cfi_startproc
  98              		@ Volatile: function does not return.
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.L8:
 124:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 125:Core/Src/stm32f1xx_it.c **** 
 126:Core/Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 127:Core/Src/stm32f1xx_it.c ****   while (1)
 103              		.loc 1 127 3 view .LVU13
 128:Core/Src/stm32f1xx_it.c ****   {
 129:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
ARM GAS  /tmp/cczgPemc.s 			page 5


 130:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 131:Core/Src/stm32f1xx_it.c ****   }
 104              		.loc 1 131 3 view .LVU14
 127:Core/Src/stm32f1xx_it.c ****   {
 105              		.loc 1 127 9 view .LVU15
 106 0000 FEE7     		b	.L8
 107              		.cfi_endproc
 108              	.LFE73:
 110              		.section	.text.UsageFault_Handler,"ax",%progbits
 111              		.align	1
 112              		.global	UsageFault_Handler
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 117              	UsageFault_Handler:
 118              	.LFB74:
 132:Core/Src/stm32f1xx_it.c **** }
 133:Core/Src/stm32f1xx_it.c **** 
 134:Core/Src/stm32f1xx_it.c **** /**
 135:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 136:Core/Src/stm32f1xx_it.c ****   */
 137:Core/Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 138:Core/Src/stm32f1xx_it.c **** {
 119              		.loc 1 138 1 view -0
 120              		.cfi_startproc
 121              		@ Volatile: function does not return.
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.L10:
 139:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 140:Core/Src/stm32f1xx_it.c **** 
 141:Core/Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 142:Core/Src/stm32f1xx_it.c ****   while (1)
 126              		.loc 1 142 3 view .LVU17
 143:Core/Src/stm32f1xx_it.c ****   {
 144:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 145:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 146:Core/Src/stm32f1xx_it.c ****   }
 127              		.loc 1 146 3 view .LVU18
 142:Core/Src/stm32f1xx_it.c ****   {
 128              		.loc 1 142 9 view .LVU19
 129 0000 FEE7     		b	.L10
 130              		.cfi_endproc
 131              	.LFE74:
 133              		.section	.text.DebugMon_Handler,"ax",%progbits
 134              		.align	1
 135              		.global	DebugMon_Handler
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 140              	DebugMon_Handler:
 141              	.LFB75:
 147:Core/Src/stm32f1xx_it.c **** }
 148:Core/Src/stm32f1xx_it.c **** 
 149:Core/Src/stm32f1xx_it.c **** /**
 150:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
ARM GAS  /tmp/cczgPemc.s 			page 6


 151:Core/Src/stm32f1xx_it.c ****   */
 152:Core/Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 153:Core/Src/stm32f1xx_it.c **** {
 142              		.loc 1 153 1 view -0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 154:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 155:Core/Src/stm32f1xx_it.c **** 
 156:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 157:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 158:Core/Src/stm32f1xx_it.c **** 
 159:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 160:Core/Src/stm32f1xx_it.c **** }
 147              		.loc 1 160 1 view .LVU21
 148 0000 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE75:
 152              		.section	.text.SysTick_Handler,"ax",%progbits
 153              		.align	1
 154              		.global	SysTick_Handler
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 159              	SysTick_Handler:
 160              	.LFB76:
 161:Core/Src/stm32f1xx_it.c **** 
 162:Core/Src/stm32f1xx_it.c **** /**
 163:Core/Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 164:Core/Src/stm32f1xx_it.c ****   */
 165:Core/Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 166:Core/Src/stm32f1xx_it.c **** {
 161              		.loc 1 166 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165 0000 08B5     		push	{r3, lr}
 166              	.LCFI0:
 167              		.cfi_def_cfa_offset 8
 168              		.cfi_offset 3, -8
 169              		.cfi_offset 14, -4
 167:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 168:Core/Src/stm32f1xx_it.c **** 
 169:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 170:Core/Src/stm32f1xx_it.c ****   HAL_IncTick();
 170              		.loc 1 170 3 view .LVU23
 171 0002 FFF7FEFF 		bl	HAL_IncTick
 172              	.LVL0:
 171:Core/Src/stm32f1xx_it.c **** #if (INCLUDE_xTaskGetSchedulerState == 1 )
 172:Core/Src/stm32f1xx_it.c ****   if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 173              		.loc 1 172 3 view .LVU24
 174              		.loc 1 172 7 is_stmt 0 view .LVU25
 175 0006 FFF7FEFF 		bl	xTaskGetSchedulerState
 176              	.LVL1:
 177              		.loc 1 172 6 discriminator 1 view .LVU26
 178 000a 0128     		cmp	r0, #1
ARM GAS  /tmp/cczgPemc.s 			page 7


 179 000c 00D1     		bne	.L15
 180              	.L12:
 173:Core/Src/stm32f1xx_it.c ****   {
 174:Core/Src/stm32f1xx_it.c **** #endif /* INCLUDE_xTaskGetSchedulerState */
 175:Core/Src/stm32f1xx_it.c ****   xPortSysTickHandler();
 176:Core/Src/stm32f1xx_it.c **** #if (INCLUDE_xTaskGetSchedulerState == 1 )
 177:Core/Src/stm32f1xx_it.c ****   }
 178:Core/Src/stm32f1xx_it.c **** #endif /* INCLUDE_xTaskGetSchedulerState */
 179:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 180:Core/Src/stm32f1xx_it.c **** 
 181:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 182:Core/Src/stm32f1xx_it.c **** }
 181              		.loc 1 182 1 view .LVU27
 182 000e 08BD     		pop	{r3, pc}
 183              	.L15:
 175:Core/Src/stm32f1xx_it.c **** #if (INCLUDE_xTaskGetSchedulerState == 1 )
 184              		.loc 1 175 3 is_stmt 1 view .LVU28
 185 0010 FFF7FEFF 		bl	xPortSysTickHandler
 186              	.LVL2:
 187              		.loc 1 182 1 is_stmt 0 view .LVU29
 188 0014 FBE7     		b	.L12
 189              		.cfi_endproc
 190              	.LFE76:
 192              		.section	.text.DMA1_Channel4_IRQHandler,"ax",%progbits
 193              		.align	1
 194              		.global	DMA1_Channel4_IRQHandler
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 199              	DMA1_Channel4_IRQHandler:
 200              	.LFB77:
 183:Core/Src/stm32f1xx_it.c **** 
 184:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 185:Core/Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 186:Core/Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 187:Core/Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 188:Core/Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 189:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 190:Core/Src/stm32f1xx_it.c **** 
 191:Core/Src/stm32f1xx_it.c **** /**
 192:Core/Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel4 global interrupt.
 193:Core/Src/stm32f1xx_it.c ****   */
 194:Core/Src/stm32f1xx_it.c **** void DMA1_Channel4_IRQHandler(void)
 195:Core/Src/stm32f1xx_it.c **** {
 201              		.loc 1 195 1 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 08B5     		push	{r3, lr}
 206              	.LCFI1:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 3, -8
 209              		.cfi_offset 14, -4
 196:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 197:Core/Src/stm32f1xx_it.c **** 
 198:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 199:Core/Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_tx);
ARM GAS  /tmp/cczgPemc.s 			page 8


 210              		.loc 1 199 3 view .LVU31
 211 0002 0248     		ldr	r0, .L18
 212 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 213              	.LVL3:
 200:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 201:Core/Src/stm32f1xx_it.c **** 
 202:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 203:Core/Src/stm32f1xx_it.c **** }
 214              		.loc 1 203 1 is_stmt 0 view .LVU32
 215 0008 08BD     		pop	{r3, pc}
 216              	.L19:
 217 000a 00BF     		.align	2
 218              	.L18:
 219 000c 00000000 		.word	hdma_usart1_tx
 220              		.cfi_endproc
 221              	.LFE77:
 223              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 224              		.align	1
 225              		.global	DMA1_Channel5_IRQHandler
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 230              	DMA1_Channel5_IRQHandler:
 231              	.LFB78:
 204:Core/Src/stm32f1xx_it.c **** 
 205:Core/Src/stm32f1xx_it.c **** /**
 206:Core/Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel5 global interrupt.
 207:Core/Src/stm32f1xx_it.c ****   */
 208:Core/Src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 209:Core/Src/stm32f1xx_it.c **** {
 232              		.loc 1 209 1 is_stmt 1 view -0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236 0000 08B5     		push	{r3, lr}
 237              	.LCFI2:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 3, -8
 240              		.cfi_offset 14, -4
 210:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 211:Core/Src/stm32f1xx_it.c **** 
 212:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 213:Core/Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 241              		.loc 1 213 3 view .LVU34
 242 0002 0248     		ldr	r0, .L22
 243 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 244              	.LVL4:
 214:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 215:Core/Src/stm32f1xx_it.c **** 
 216:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 217:Core/Src/stm32f1xx_it.c **** }
 245              		.loc 1 217 1 is_stmt 0 view .LVU35
 246 0008 08BD     		pop	{r3, pc}
 247              	.L23:
 248 000a 00BF     		.align	2
 249              	.L22:
 250 000c 00000000 		.word	hdma_usart1_rx
ARM GAS  /tmp/cczgPemc.s 			page 9


 251              		.cfi_endproc
 252              	.LFE78:
 254              		.section	.text.DMA1_Channel6_IRQHandler,"ax",%progbits
 255              		.align	1
 256              		.global	DMA1_Channel6_IRQHandler
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 261              	DMA1_Channel6_IRQHandler:
 262              	.LFB79:
 218:Core/Src/stm32f1xx_it.c **** 
 219:Core/Src/stm32f1xx_it.c **** /**
 220:Core/Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel6 global interrupt.
 221:Core/Src/stm32f1xx_it.c ****   */
 222:Core/Src/stm32f1xx_it.c **** void DMA1_Channel6_IRQHandler(void)
 223:Core/Src/stm32f1xx_it.c **** {
 263              		.loc 1 223 1 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267 0000 08B5     		push	{r3, lr}
 268              	.LCFI3:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 3, -8
 271              		.cfi_offset 14, -4
 224:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
 225:Core/Src/stm32f1xx_it.c **** 
 226:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 0 */
 227:Core/Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_rx);
 272              		.loc 1 227 3 view .LVU37
 273 0002 0248     		ldr	r0, .L26
 274 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 275              	.LVL5:
 228:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
 229:Core/Src/stm32f1xx_it.c **** 
 230:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 1 */
 231:Core/Src/stm32f1xx_it.c **** }
 276              		.loc 1 231 1 is_stmt 0 view .LVU38
 277 0008 08BD     		pop	{r3, pc}
 278              	.L27:
 279 000a 00BF     		.align	2
 280              	.L26:
 281 000c 00000000 		.word	hdma_usart2_rx
 282              		.cfi_endproc
 283              	.LFE79:
 285              		.section	.text.DMA1_Channel7_IRQHandler,"ax",%progbits
 286              		.align	1
 287              		.global	DMA1_Channel7_IRQHandler
 288              		.syntax unified
 289              		.thumb
 290              		.thumb_func
 292              	DMA1_Channel7_IRQHandler:
 293              	.LFB80:
 232:Core/Src/stm32f1xx_it.c **** 
 233:Core/Src/stm32f1xx_it.c **** /**
 234:Core/Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel7 global interrupt.
 235:Core/Src/stm32f1xx_it.c ****   */
ARM GAS  /tmp/cczgPemc.s 			page 10


 236:Core/Src/stm32f1xx_it.c **** void DMA1_Channel7_IRQHandler(void)
 237:Core/Src/stm32f1xx_it.c **** {
 294              		.loc 1 237 1 is_stmt 1 view -0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298 0000 08B5     		push	{r3, lr}
 299              	.LCFI4:
 300              		.cfi_def_cfa_offset 8
 301              		.cfi_offset 3, -8
 302              		.cfi_offset 14, -4
 238:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
 239:Core/Src/stm32f1xx_it.c **** 
 240:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 0 */
 241:Core/Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_tx);
 303              		.loc 1 241 3 view .LVU40
 304 0002 0248     		ldr	r0, .L30
 305 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 306              	.LVL6:
 242:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
 243:Core/Src/stm32f1xx_it.c **** 
 244:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 1 */
 245:Core/Src/stm32f1xx_it.c **** }
 307              		.loc 1 245 1 is_stmt 0 view .LVU41
 308 0008 08BD     		pop	{r3, pc}
 309              	.L31:
 310 000a 00BF     		.align	2
 311              	.L30:
 312 000c 00000000 		.word	hdma_usart2_tx
 313              		.cfi_endproc
 314              	.LFE80:
 316              		.section	.text.USB_LP_CAN1_RX0_IRQHandler,"ax",%progbits
 317              		.align	1
 318              		.global	USB_LP_CAN1_RX0_IRQHandler
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 323              	USB_LP_CAN1_RX0_IRQHandler:
 324              	.LFB81:
 246:Core/Src/stm32f1xx_it.c **** 
 247:Core/Src/stm32f1xx_it.c **** /**
 248:Core/Src/stm32f1xx_it.c ****   * @brief This function handles USB low priority or CAN RX0 interrupts.
 249:Core/Src/stm32f1xx_it.c ****   */
 250:Core/Src/stm32f1xx_it.c **** void USB_LP_CAN1_RX0_IRQHandler(void)
 251:Core/Src/stm32f1xx_it.c **** {
 325              		.loc 1 251 1 is_stmt 1 view -0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329 0000 08B5     		push	{r3, lr}
 330              	.LCFI5:
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 3, -8
 333              		.cfi_offset 14, -4
 252:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
 253:Core/Src/stm32f1xx_it.c **** 
 254:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
ARM GAS  /tmp/cczgPemc.s 			page 11


 255:Core/Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan);
 334              		.loc 1 255 3 view .LVU43
 335 0002 0248     		ldr	r0, .L34
 336 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 337              	.LVL7:
 256:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
 257:Core/Src/stm32f1xx_it.c **** 
 258:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
 259:Core/Src/stm32f1xx_it.c **** }
 338              		.loc 1 259 1 is_stmt 0 view .LVU44
 339 0008 08BD     		pop	{r3, pc}
 340              	.L35:
 341 000a 00BF     		.align	2
 342              	.L34:
 343 000c 00000000 		.word	hcan
 344              		.cfi_endproc
 345              	.LFE81:
 347              		.section	.text.CAN1_RX1_IRQHandler,"ax",%progbits
 348              		.align	1
 349              		.global	CAN1_RX1_IRQHandler
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 354              	CAN1_RX1_IRQHandler:
 355              	.LFB82:
 260:Core/Src/stm32f1xx_it.c **** 
 261:Core/Src/stm32f1xx_it.c **** /**
 262:Core/Src/stm32f1xx_it.c ****   * @brief This function handles CAN RX1 interrupt.
 263:Core/Src/stm32f1xx_it.c ****   */
 264:Core/Src/stm32f1xx_it.c **** void CAN1_RX1_IRQHandler(void)
 265:Core/Src/stm32f1xx_it.c **** {
 356              		.loc 1 265 1 is_stmt 1 view -0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360 0000 08B5     		push	{r3, lr}
 361              	.LCFI6:
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 3, -8
 364              		.cfi_offset 14, -4
 266:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
 267:Core/Src/stm32f1xx_it.c **** 
 268:Core/Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 0 */
 269:Core/Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan);
 365              		.loc 1 269 3 view .LVU46
 366 0002 0248     		ldr	r0, .L38
 367 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 368              	.LVL8:
 270:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
 271:Core/Src/stm32f1xx_it.c **** 
 272:Core/Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 1 */
 273:Core/Src/stm32f1xx_it.c **** }
 369              		.loc 1 273 1 is_stmt 0 view .LVU47
 370 0008 08BD     		pop	{r3, pc}
 371              	.L39:
 372 000a 00BF     		.align	2
 373              	.L38:
ARM GAS  /tmp/cczgPemc.s 			page 12


 374 000c 00000000 		.word	hcan
 375              		.cfi_endproc
 376              	.LFE82:
 378              		.section	.text.USART1_IRQHandler,"ax",%progbits
 379              		.align	1
 380              		.global	USART1_IRQHandler
 381              		.syntax unified
 382              		.thumb
 383              		.thumb_func
 385              	USART1_IRQHandler:
 386              	.LFB83:
 274:Core/Src/stm32f1xx_it.c **** 
 275:Core/Src/stm32f1xx_it.c **** /**
 276:Core/Src/stm32f1xx_it.c ****   * @brief This function handles USART1 global interrupt.
 277:Core/Src/stm32f1xx_it.c ****   */
 278:Core/Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 279:Core/Src/stm32f1xx_it.c **** {
 387              		.loc 1 279 1 is_stmt 1 view -0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391 0000 08B5     		push	{r3, lr}
 392              	.LCFI7:
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 3, -8
 395              		.cfi_offset 14, -4
 280:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 281:Core/Src/stm32f1xx_it.c **** 
 282:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 283:Core/Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 396              		.loc 1 283 3 view .LVU49
 397 0002 0248     		ldr	r0, .L42
 398 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 399              	.LVL9:
 284:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 285:Core/Src/stm32f1xx_it.c **** 
 286:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 287:Core/Src/stm32f1xx_it.c **** }
 400              		.loc 1 287 1 is_stmt 0 view .LVU50
 401 0008 08BD     		pop	{r3, pc}
 402              	.L43:
 403 000a 00BF     		.align	2
 404              	.L42:
 405 000c 00000000 		.word	huart1
 406              		.cfi_endproc
 407              	.LFE83:
 409              		.section	.text.USART2_IRQHandler,"ax",%progbits
 410              		.align	1
 411              		.global	USART2_IRQHandler
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 416              	USART2_IRQHandler:
 417              	.LFB84:
 288:Core/Src/stm32f1xx_it.c **** 
 289:Core/Src/stm32f1xx_it.c **** /**
 290:Core/Src/stm32f1xx_it.c ****   * @brief This function handles USART2 global interrupt.
ARM GAS  /tmp/cczgPemc.s 			page 13


 291:Core/Src/stm32f1xx_it.c ****   */
 292:Core/Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
 293:Core/Src/stm32f1xx_it.c **** {
 418              		.loc 1 293 1 is_stmt 1 view -0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422 0000 08B5     		push	{r3, lr}
 423              	.LCFI8:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 3, -8
 426              		.cfi_offset 14, -4
 294:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 295:Core/Src/stm32f1xx_it.c **** 
 296:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 297:Core/Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 427              		.loc 1 297 3 view .LVU52
 428 0002 0248     		ldr	r0, .L46
 429 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 430              	.LVL10:
 298:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 299:Core/Src/stm32f1xx_it.c **** 
 300:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 301:Core/Src/stm32f1xx_it.c **** }
 431              		.loc 1 301 1 is_stmt 0 view .LVU53
 432 0008 08BD     		pop	{r3, pc}
 433              	.L47:
 434 000a 00BF     		.align	2
 435              	.L46:
 436 000c 00000000 		.word	huart2
 437              		.cfi_endproc
 438              	.LFE84:
 440              		.text
 441              	.Letext0:
 442              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 443              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 444              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 445              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 446              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 447              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 448              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 449              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 450              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 451              		.file 11 "Core/Inc/FreeRTOSConfig.h"
 452              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 453              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/cczgPemc.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_it.c
     /tmp/cczgPemc.s:19     .text.NMI_Handler:00000000 $t
     /tmp/cczgPemc.s:25     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/cczgPemc.s:42     .text.HardFault_Handler:00000000 $t
     /tmp/cczgPemc.s:48     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/cczgPemc.s:65     .text.MemManage_Handler:00000000 $t
     /tmp/cczgPemc.s:71     .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/cczgPemc.s:88     .text.BusFault_Handler:00000000 $t
     /tmp/cczgPemc.s:94     .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/cczgPemc.s:111    .text.UsageFault_Handler:00000000 $t
     /tmp/cczgPemc.s:117    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/cczgPemc.s:134    .text.DebugMon_Handler:00000000 $t
     /tmp/cczgPemc.s:140    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/cczgPemc.s:153    .text.SysTick_Handler:00000000 $t
     /tmp/cczgPemc.s:159    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/cczgPemc.s:193    .text.DMA1_Channel4_IRQHandler:00000000 $t
     /tmp/cczgPemc.s:199    .text.DMA1_Channel4_IRQHandler:00000000 DMA1_Channel4_IRQHandler
     /tmp/cczgPemc.s:219    .text.DMA1_Channel4_IRQHandler:0000000c $d
     /tmp/cczgPemc.s:224    .text.DMA1_Channel5_IRQHandler:00000000 $t
     /tmp/cczgPemc.s:230    .text.DMA1_Channel5_IRQHandler:00000000 DMA1_Channel5_IRQHandler
     /tmp/cczgPemc.s:250    .text.DMA1_Channel5_IRQHandler:0000000c $d
     /tmp/cczgPemc.s:255    .text.DMA1_Channel6_IRQHandler:00000000 $t
     /tmp/cczgPemc.s:261    .text.DMA1_Channel6_IRQHandler:00000000 DMA1_Channel6_IRQHandler
     /tmp/cczgPemc.s:281    .text.DMA1_Channel6_IRQHandler:0000000c $d
     /tmp/cczgPemc.s:286    .text.DMA1_Channel7_IRQHandler:00000000 $t
     /tmp/cczgPemc.s:292    .text.DMA1_Channel7_IRQHandler:00000000 DMA1_Channel7_IRQHandler
     /tmp/cczgPemc.s:312    .text.DMA1_Channel7_IRQHandler:0000000c $d
     /tmp/cczgPemc.s:317    .text.USB_LP_CAN1_RX0_IRQHandler:00000000 $t
     /tmp/cczgPemc.s:323    .text.USB_LP_CAN1_RX0_IRQHandler:00000000 USB_LP_CAN1_RX0_IRQHandler
     /tmp/cczgPemc.s:343    .text.USB_LP_CAN1_RX0_IRQHandler:0000000c $d
     /tmp/cczgPemc.s:348    .text.CAN1_RX1_IRQHandler:00000000 $t
     /tmp/cczgPemc.s:354    .text.CAN1_RX1_IRQHandler:00000000 CAN1_RX1_IRQHandler
     /tmp/cczgPemc.s:374    .text.CAN1_RX1_IRQHandler:0000000c $d
     /tmp/cczgPemc.s:379    .text.USART1_IRQHandler:00000000 $t
     /tmp/cczgPemc.s:385    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/cczgPemc.s:405    .text.USART1_IRQHandler:0000000c $d
     /tmp/cczgPemc.s:410    .text.USART2_IRQHandler:00000000 $t
     /tmp/cczgPemc.s:416    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
     /tmp/cczgPemc.s:436    .text.USART2_IRQHandler:0000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
xTaskGetSchedulerState
xPortSysTickHandler
HAL_DMA_IRQHandler
hdma_usart1_tx
hdma_usart1_rx
hdma_usart2_rx
hdma_usart2_tx
HAL_CAN_IRQHandler
hcan
HAL_UART_IRQHandler
huart1
huart2
