ARM GAS  /tmp/ccg4Pmec.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/freertos.c"
  18              		.section	.text.StartDefaultTask,"ax",%progbits
  19              		.align	1
  20              		.global	StartDefaultTask
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	StartDefaultTask:
  26              	.LFB72:
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****  ******************************************************************************
   4:Core/Src/freertos.c ****  * File Name          : freertos.c
   5:Core/Src/freertos.c ****  * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****  ******************************************************************************
   7:Core/Src/freertos.c ****  * @attention
   8:Core/Src/freertos.c ****  *
   9:Core/Src/freertos.c ****  * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/freertos.c ****  * All rights reserved.
  11:Core/Src/freertos.c ****  *
  12:Core/Src/freertos.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/freertos.c ****  * in the root directory of this software component.
  14:Core/Src/freertos.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/freertos.c ****  *
  16:Core/Src/freertos.c ****  ******************************************************************************
  17:Core/Src/freertos.c ****  */
  18:Core/Src/freertos.c **** /* USER CODE END Header */
  19:Core/Src/freertos.c **** 
  20:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/freertos.c **** #include "FreeRTOS.h"
  22:Core/Src/freertos.c **** #include "task.h"
  23:Core/Src/freertos.c **** #include "main.h"
  24:Core/Src/freertos.c **** #include "cmsis_os.h"
  25:Core/Src/freertos.c **** 
  26:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/freertos.c **** #include "led_flow_task.h"
  29:Core/Src/freertos.c **** #include "ctrl_task.h"
  30:Core/Src/freertos.c **** /* USER CODE END Includes */
  31:Core/Src/freertos.c **** 
  32:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccg4Pmec.s 			page 2


  33:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/freertos.c **** 
  35:Core/Src/freertos.c **** /* USER CODE END PTD */
  36:Core/Src/freertos.c **** 
  37:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  39:Core/Src/freertos.c **** 
  40:Core/Src/freertos.c **** /* USER CODE END PD */
  41:Core/Src/freertos.c **** 
  42:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  44:Core/Src/freertos.c **** 
  45:Core/Src/freertos.c **** /* USER CODE END PM */
  46:Core/Src/freertos.c **** 
  47:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  49:Core/Src/freertos.c **** osThreadId ledFlowTaskHandle;
  50:Core/Src/freertos.c **** osThreadId ctrlTaskHandle;
  51:Core/Src/freertos.c **** /* USER CODE END Variables */
  52:Core/Src/freertos.c **** osThreadId defaultTaskHandle;
  53:Core/Src/freertos.c **** 
  54:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  55:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  56:Core/Src/freertos.c **** 
  57:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  58:Core/Src/freertos.c **** 
  59:Core/Src/freertos.c **** void StartDefaultTask(void const * argument);
  60:Core/Src/freertos.c **** 
  61:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  62:Core/Src/freertos.c **** 
  63:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  64:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  65:Core/Src/freertos.c **** 
  66:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
  67:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  68:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  69:Core/Src/freertos.c **** 
  70:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskSt
  71:Core/Src/freertos.c **** {
  72:Core/Src/freertos.c ****     *ppxIdleTaskTCBBuffer   = &xIdleTaskTCBBuffer;
  73:Core/Src/freertos.c ****     *ppxIdleTaskStackBuffer = &xIdleStack[0];
  74:Core/Src/freertos.c ****     *pulIdleTaskStackSize   = configMINIMAL_STACK_SIZE;
  75:Core/Src/freertos.c ****     /* place for user code */
  76:Core/Src/freertos.c **** }
  77:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  78:Core/Src/freertos.c **** 
  79:Core/Src/freertos.c **** /**
  80:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
  81:Core/Src/freertos.c ****   * @param  None
  82:Core/Src/freertos.c ****   * @retval None
  83:Core/Src/freertos.c ****   */
  84:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
  85:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  86:Core/Src/freertos.c **** 
  87:Core/Src/freertos.c ****   /* USER CODE END Init */
  88:Core/Src/freertos.c **** 
  89:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
ARM GAS  /tmp/ccg4Pmec.s 			page 3


  90:Core/Src/freertos.c ****     /* add mutexes, ... */
  91:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
  92:Core/Src/freertos.c **** 
  93:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
  94:Core/Src/freertos.c ****     /* add semaphores, ... */
  95:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
  96:Core/Src/freertos.c **** 
  97:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
  98:Core/Src/freertos.c ****     /* start timers, add new ones, ... */
  99:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 100:Core/Src/freertos.c **** 
 101:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 102:Core/Src/freertos.c ****     /* add queues, ... */
 103:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 104:Core/Src/freertos.c **** 
 105:Core/Src/freertos.c ****   /* Create the thread(s) */
 106:Core/Src/freertos.c ****   /* definition and creation of defaultTask */
 107:Core/Src/freertos.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 108:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 109:Core/Src/freertos.c **** 
 110:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 111:Core/Src/freertos.c ****     /* add threads, ... */
 112:Core/Src/freertos.c ****     osThreadDef(ledFlowTask, led_flow_task, osPriorityNormal, 0, 16);
 113:Core/Src/freertos.c ****     ledFlowTaskHandle = osThreadCreate(osThread(ledFlowTask), NULL);
 114:Core/Src/freertos.c ****     if (ledFlowTaskHandle == NULL) Error_Handler();
 115:Core/Src/freertos.c **** 
 116:Core/Src/freertos.c ****     osThreadDef(ctrlTask, ctrl_task, osPriorityAboveNormal, 0, 128);
 117:Core/Src/freertos.c ****     ctrlTaskHandle = osThreadCreate(osThread(ctrlTask), NULL);
 118:Core/Src/freertos.c ****     if (ctrlTaskHandle == NULL) Error_Handler();
 119:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 120:Core/Src/freertos.c **** 
 121:Core/Src/freertos.c **** }
 122:Core/Src/freertos.c **** 
 123:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 124:Core/Src/freertos.c **** /**
 125:Core/Src/freertos.c ****  * @brief  Function implementing the defaultTask thread.
 126:Core/Src/freertos.c ****  * @param  argument: Not used
 127:Core/Src/freertos.c ****  * @retval None
 128:Core/Src/freertos.c ****  */
 129:Core/Src/freertos.c **** /* USER CODE END Header_StartDefaultTask */
 130:Core/Src/freertos.c **** void StartDefaultTask(void const * argument)
 131:Core/Src/freertos.c **** {
  27              		.loc 1 131 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33              		.loc 1 131 1 is_stmt 0 view .LVU1
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  39              	.LVL1:
  40              	.L2:
 132:Core/Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
ARM GAS  /tmp/ccg4Pmec.s 			page 4


 133:Core/Src/freertos.c ****     /* Infinite loop */
 134:Core/Src/freertos.c ****     for (;;) {
  41              		.loc 1 134 5 is_stmt 1 view .LVU2
 135:Core/Src/freertos.c ****         osDelay(1);
  42              		.loc 1 135 9 discriminator 1 view .LVU3
  43 0002 0120     		movs	r0, #1
  44 0004 FFF7FEFF 		bl	osDelay
  45              	.LVL2:
 134:Core/Src/freertos.c ****         osDelay(1);
  46              		.loc 1 134 5 view .LVU4
  47 0008 FBE7     		b	.L2
  48              		.cfi_endproc
  49              	.LFE72:
  51              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  52              		.align	1
  53              		.global	vApplicationGetIdleTaskMemory
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  58              	vApplicationGetIdleTaskMemory:
  59              	.LVL3:
  60              	.LFB70:
  71:Core/Src/freertos.c ****     *ppxIdleTaskTCBBuffer   = &xIdleTaskTCBBuffer;
  61              		.loc 1 71 1 view -0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  72:Core/Src/freertos.c ****     *ppxIdleTaskStackBuffer = &xIdleStack[0];
  66              		.loc 1 72 5 view .LVU6
  72:Core/Src/freertos.c ****     *ppxIdleTaskStackBuffer = &xIdleStack[0];
  67              		.loc 1 72 29 is_stmt 0 view .LVU7
  68 0000 034B     		ldr	r3, .L5
  69 0002 0360     		str	r3, [r0]
  73:Core/Src/freertos.c ****     *pulIdleTaskStackSize   = configMINIMAL_STACK_SIZE;
  70              		.loc 1 73 5 is_stmt 1 view .LVU8
  73:Core/Src/freertos.c ****     *pulIdleTaskStackSize   = configMINIMAL_STACK_SIZE;
  71              		.loc 1 73 29 is_stmt 0 view .LVU9
  72 0004 034B     		ldr	r3, .L5+4
  73 0006 0B60     		str	r3, [r1]
  74:Core/Src/freertos.c ****     /* place for user code */
  74              		.loc 1 74 5 is_stmt 1 view .LVU10
  74:Core/Src/freertos.c ****     /* place for user code */
  75              		.loc 1 74 29 is_stmt 0 view .LVU11
  76 0008 8023     		movs	r3, #128
  77 000a 1360     		str	r3, [r2]
  76:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  78              		.loc 1 76 1 view .LVU12
  79 000c 7047     		bx	lr
  80              	.L6:
  81 000e 00BF     		.align	2
  82              	.L5:
  83 0010 00000000 		.word	xIdleTaskTCBBuffer
  84 0014 00000000 		.word	xIdleStack
  85              		.cfi_endproc
  86              	.LFE70:
  88              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
ARM GAS  /tmp/ccg4Pmec.s 			page 5


  89              		.align	1
  90              		.global	MX_FREERTOS_Init
  91              		.syntax unified
  92              		.thumb
  93              		.thumb_func
  95              	MX_FREERTOS_Init:
  96              	.LFB71:
  84:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  97              		.loc 1 84 29 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 88
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101 0000 30B5     		push	{r4, r5, lr}
 102              	.LCFI1:
 103              		.cfi_def_cfa_offset 12
 104              		.cfi_offset 4, -12
 105              		.cfi_offset 5, -8
 106              		.cfi_offset 14, -4
 107 0002 97B0     		sub	sp, sp, #92
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 104
 107:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 110              		.loc 1 107 3 view .LVU14
 111 0004 1B4C     		ldr	r4, .L13
 112 0006 0FAD     		add	r5, sp, #60
 113 0008 A446     		mov	ip, r4
 114 000a BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 115 000e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 116 0010 9CE80700 		ldm	ip, {r0, r1, r2}
 117 0014 85E80700 		stm	r5, {r0, r1, r2}
 108:Core/Src/freertos.c **** 
 118              		.loc 1 108 3 view .LVU15
 108:Core/Src/freertos.c **** 
 119              		.loc 1 108 23 is_stmt 0 view .LVU16
 120 0018 0021     		movs	r1, #0
 121 001a 0FA8     		add	r0, sp, #60
 122 001c FFF7FEFF 		bl	osThreadCreate
 123              	.LVL4:
 108:Core/Src/freertos.c **** 
 124              		.loc 1 108 21 discriminator 1 view .LVU17
 125 0020 154B     		ldr	r3, .L13+4
 126 0022 1860     		str	r0, [r3]
 112:Core/Src/freertos.c ****     ledFlowTaskHandle = osThreadCreate(osThread(ledFlowTask), NULL);
 127              		.loc 1 112 5 is_stmt 1 view .LVU18
 128 0024 08AD     		add	r5, sp, #32
 129 0026 04F11C0C 		add	ip, r4, #28
 130 002a BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 131 002e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 132 0030 9CE80700 		ldm	ip, {r0, r1, r2}
 133 0034 85E80700 		stm	r5, {r0, r1, r2}
 113:Core/Src/freertos.c ****     if (ledFlowTaskHandle == NULL) Error_Handler();
 134              		.loc 1 113 5 view .LVU19
 113:Core/Src/freertos.c ****     if (ledFlowTaskHandle == NULL) Error_Handler();
 135              		.loc 1 113 25 is_stmt 0 view .LVU20
 136 0038 0021     		movs	r1, #0
 137 003a 08A8     		add	r0, sp, #32
 138 003c FFF7FEFF 		bl	osThreadCreate
ARM GAS  /tmp/ccg4Pmec.s 			page 6


 139              	.LVL5:
 113:Core/Src/freertos.c ****     if (ledFlowTaskHandle == NULL) Error_Handler();
 140              		.loc 1 113 23 discriminator 1 view .LVU21
 141 0040 0E4B     		ldr	r3, .L13+8
 142 0042 1860     		str	r0, [r3]
 114:Core/Src/freertos.c **** 
 143              		.loc 1 114 5 is_stmt 1 view .LVU22
 114:Core/Src/freertos.c **** 
 144              		.loc 1 114 8 is_stmt 0 view .LVU23
 145 0044 80B1     		cbz	r0, .L11
 146              	.L8:
 116:Core/Src/freertos.c ****     ctrlTaskHandle = osThreadCreate(osThread(ctrlTask), NULL);
 147              		.loc 1 116 5 is_stmt 1 view .LVU24
 148 0046 01AC     		add	r4, sp, #4
 149 0048 0D4D     		ldr	r5, .L13+12
 150 004a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 151 004c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 152 004e 95E80700 		ldm	r5, {r0, r1, r2}
 153 0052 84E80700 		stm	r4, {r0, r1, r2}
 117:Core/Src/freertos.c ****     if (ctrlTaskHandle == NULL) Error_Handler();
 154              		.loc 1 117 5 view .LVU25
 117:Core/Src/freertos.c ****     if (ctrlTaskHandle == NULL) Error_Handler();
 155              		.loc 1 117 22 is_stmt 0 view .LVU26
 156 0056 0021     		movs	r1, #0
 157 0058 01A8     		add	r0, sp, #4
 158 005a FFF7FEFF 		bl	osThreadCreate
 159              	.LVL6:
 117:Core/Src/freertos.c ****     if (ctrlTaskHandle == NULL) Error_Handler();
 160              		.loc 1 117 20 discriminator 1 view .LVU27
 161 005e 094B     		ldr	r3, .L13+16
 162 0060 1860     		str	r0, [r3]
 118:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 163              		.loc 1 118 5 is_stmt 1 view .LVU28
 118:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 164              		.loc 1 118 8 is_stmt 0 view .LVU29
 165 0062 20B1     		cbz	r0, .L12
 166              	.L7:
 121:Core/Src/freertos.c **** 
 167              		.loc 1 121 1 view .LVU30
 168 0064 17B0     		add	sp, sp, #92
 169              	.LCFI3:
 170              		.cfi_remember_state
 171              		.cfi_def_cfa_offset 12
 172              		@ sp needed
 173 0066 30BD     		pop	{r4, r5, pc}
 174              	.L11:
 175              	.LCFI4:
 176              		.cfi_restore_state
 114:Core/Src/freertos.c **** 
 177              		.loc 1 114 36 is_stmt 1 discriminator 1 view .LVU31
 178 0068 FFF7FEFF 		bl	Error_Handler
 179              	.LVL7:
 180 006c EBE7     		b	.L8
 181              	.L12:
 118:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 182              		.loc 1 118 33 discriminator 1 view .LVU32
 183 006e FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccg4Pmec.s 			page 7


 184              	.LVL8:
 121:Core/Src/freertos.c **** 
 185              		.loc 1 121 1 is_stmt 0 view .LVU33
 186 0072 F7E7     		b	.L7
 187              	.L14:
 188              		.align	2
 189              	.L13:
 190 0074 00000000 		.word	.LANCHOR0
 191 0078 00000000 		.word	defaultTaskHandle
 192 007c 00000000 		.word	ledFlowTaskHandle
 193 0080 38000000 		.word	.LANCHOR0+56
 194 0084 00000000 		.word	ctrlTaskHandle
 195              		.cfi_endproc
 196              	.LFE71:
 198              		.section	.rodata.str1.4,"aMS",%progbits,1
 199              		.align	2
 200              	.LC4:
 201 0000 6374726C 		.ascii	"ctrlTask\000"
 201      5461736B 
 201      00
 202 0009 000000   		.align	2
 203              	.LC2:
 204 000c 6C656446 		.ascii	"ledFlowTask\000"
 204      6C6F7754 
 204      61736B00 
 205              		.align	2
 206              	.LC0:
 207 0018 64656661 		.ascii	"defaultTask\000"
 207      756C7454 
 207      61736B00 
 208              		.section	.bss.xIdleStack,"aw",%nobits
 209              		.align	2
 212              	xIdleStack:
 213 0000 00000000 		.space	512
 213      00000000 
 213      00000000 
 213      00000000 
 213      00000000 
 214              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 215              		.align	2
 218              	xIdleTaskTCBBuffer:
 219 0000 00000000 		.space	84
 219      00000000 
 219      00000000 
 219      00000000 
 219      00000000 
 220              		.global	defaultTaskHandle
 221              		.section	.bss.defaultTaskHandle,"aw",%nobits
 222              		.align	2
 225              	defaultTaskHandle:
 226 0000 00000000 		.space	4
 227              		.global	ctrlTaskHandle
 228              		.section	.bss.ctrlTaskHandle,"aw",%nobits
 229              		.align	2
 232              	ctrlTaskHandle:
 233 0000 00000000 		.space	4
 234              		.global	ledFlowTaskHandle
ARM GAS  /tmp/ccg4Pmec.s 			page 8


 235              		.section	.bss.ledFlowTaskHandle,"aw",%nobits
 236              		.align	2
 239              	ledFlowTaskHandle:
 240 0000 00000000 		.space	4
 241              		.section	.rodata
 242              		.align	2
 243              		.set	.LANCHOR0,. + 0
 244              	.LC6:
 245 0000 18000000 		.word	.LC0
 246 0004 00000000 		.word	StartDefaultTask
 247 0008 0000     		.short	0
 248 000a 0000     		.space	2
 249 000c 00000000 		.word	0
 250 0010 80000000 		.word	128
 251 0014 00000000 		.word	0
 252 0018 00000000 		.word	0
 253              	.LC7:
 254 001c 0C000000 		.word	.LC2
 255 0020 00000000 		.word	led_flow_task
 256 0024 0000     		.short	0
 257 0026 0000     		.space	2
 258 0028 00000000 		.word	0
 259 002c 10000000 		.word	16
 260 0030 00000000 		.word	0
 261 0034 00000000 		.word	0
 262              	.LC8:
 263 0038 00000000 		.word	.LC4
 264 003c 00000000 		.word	ctrl_task
 265 0040 0100     		.short	1
 266 0042 0000     		.space	2
 267 0044 00000000 		.word	0
 268 0048 80000000 		.word	128
 269 004c 00000000 		.word	0
 270 0050 00000000 		.word	0
 271              		.text
 272              	.Letext0:
 273              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 274              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 275              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 276              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 277              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 278              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 279              		.file 8 "application/CAN_Receive.h"
 280              		.file 9 "application/led_flow_task.h"
 281              		.file 10 "application/ctrl_task.h"
 282              		.file 11 "Core/Inc/main.h"
ARM GAS  /tmp/ccg4Pmec.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
     /tmp/ccg4Pmec.s:19     .text.StartDefaultTask:00000000 $t
     /tmp/ccg4Pmec.s:25     .text.StartDefaultTask:00000000 StartDefaultTask
     /tmp/ccg4Pmec.s:52     .text.vApplicationGetIdleTaskMemory:00000000 $t
     /tmp/ccg4Pmec.s:58     .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
     /tmp/ccg4Pmec.s:83     .text.vApplicationGetIdleTaskMemory:00000010 $d
     /tmp/ccg4Pmec.s:218    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer
     /tmp/ccg4Pmec.s:212    .bss.xIdleStack:00000000 xIdleStack
     /tmp/ccg4Pmec.s:89     .text.MX_FREERTOS_Init:00000000 $t
     /tmp/ccg4Pmec.s:95     .text.MX_FREERTOS_Init:00000000 MX_FREERTOS_Init
     /tmp/ccg4Pmec.s:190    .text.MX_FREERTOS_Init:00000074 $d
     /tmp/ccg4Pmec.s:225    .bss.defaultTaskHandle:00000000 defaultTaskHandle
     /tmp/ccg4Pmec.s:239    .bss.ledFlowTaskHandle:00000000 ledFlowTaskHandle
     /tmp/ccg4Pmec.s:232    .bss.ctrlTaskHandle:00000000 ctrlTaskHandle
     /tmp/ccg4Pmec.s:199    .rodata.str1.4:00000000 $d
     /tmp/ccg4Pmec.s:209    .bss.xIdleStack:00000000 $d
     /tmp/ccg4Pmec.s:215    .bss.xIdleTaskTCBBuffer:00000000 $d
     /tmp/ccg4Pmec.s:222    .bss.defaultTaskHandle:00000000 $d
     /tmp/ccg4Pmec.s:229    .bss.ctrlTaskHandle:00000000 $d
     /tmp/ccg4Pmec.s:236    .bss.ledFlowTaskHandle:00000000 $d
     /tmp/ccg4Pmec.s:242    .rodata:00000000 $d

UNDEFINED SYMBOLS
osDelay
osThreadCreate
Error_Handler
led_flow_task
ctrl_task
